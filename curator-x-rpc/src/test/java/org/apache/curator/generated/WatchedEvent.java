/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.curator.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WatchedEvent implements org.apache.thrift.TBase<WatchedEvent, WatchedEvent._Fields>, java.io.Serializable, Cloneable, Comparable<WatchedEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WatchedEvent");

  private static final org.apache.thrift.protocol.TField KEEPER_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("keeperState", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WatchedEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WatchedEventTupleSchemeFactory());
  }

  /**
   * 
   * @see KeeperState
   */
  public KeeperState keeperState; // required
  /**
   * 
   * @see EventType
   */
  public EventType eventType; // required
  public String path; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see KeeperState
     */
    KEEPER_STATE((short)1, "keeperState"),
    /**
     * 
     * @see EventType
     */
    EVENT_TYPE((short)2, "eventType"),
    PATH((short)3, "path");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEEPER_STATE
          return KEEPER_STATE;
        case 2: // EVENT_TYPE
          return EVENT_TYPE;
        case 3: // PATH
          return PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEEPER_STATE, new org.apache.thrift.meta_data.FieldMetaData("keeperState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, KeeperState.class)));
    tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("eventType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EventType.class)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WatchedEvent.class, metaDataMap);
  }

  public WatchedEvent() {
  }

  public WatchedEvent(
    KeeperState keeperState,
    EventType eventType,
    String path)
  {
    this();
    this.keeperState = keeperState;
    this.eventType = eventType;
    this.path = path;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WatchedEvent(WatchedEvent other) {
    if (other.isSetKeeperState()) {
      this.keeperState = other.keeperState;
    }
    if (other.isSetEventType()) {
      this.eventType = other.eventType;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
  }

  public WatchedEvent deepCopy() {
    return new WatchedEvent(this);
  }

  @Override
  public void clear() {
    this.keeperState = null;
    this.eventType = null;
    this.path = null;
  }

  /**
   * 
   * @see KeeperState
   */
  public KeeperState getKeeperState() {
    return this.keeperState;
  }

  /**
   * 
   * @see KeeperState
   */
  public WatchedEvent setKeeperState(KeeperState keeperState) {
    this.keeperState = keeperState;
    return this;
  }

  public void unsetKeeperState() {
    this.keeperState = null;
  }

  /** Returns true if field keeperState is set (has been assigned a value) and false otherwise */
  public boolean isSetKeeperState() {
    return this.keeperState != null;
  }

  public void setKeeperStateIsSet(boolean value) {
    if (!value) {
      this.keeperState = null;
    }
  }

  /**
   * 
   * @see EventType
   */
  public EventType getEventType() {
    return this.eventType;
  }

  /**
   * 
   * @see EventType
   */
  public WatchedEvent setEventType(EventType eventType) {
    this.eventType = eventType;
    return this;
  }

  public void unsetEventType() {
    this.eventType = null;
  }

  /** Returns true if field eventType is set (has been assigned a value) and false otherwise */
  public boolean isSetEventType() {
    return this.eventType != null;
  }

  public void setEventTypeIsSet(boolean value) {
    if (!value) {
      this.eventType = null;
    }
  }

  public String getPath() {
    return this.path;
  }

  public WatchedEvent setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEEPER_STATE:
      if (value == null) {
        unsetKeeperState();
      } else {
        setKeeperState((KeeperState)value);
      }
      break;

    case EVENT_TYPE:
      if (value == null) {
        unsetEventType();
      } else {
        setEventType((EventType)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEEPER_STATE:
      return getKeeperState();

    case EVENT_TYPE:
      return getEventType();

    case PATH:
      return getPath();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEEPER_STATE:
      return isSetKeeperState();
    case EVENT_TYPE:
      return isSetEventType();
    case PATH:
      return isSetPath();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WatchedEvent)
      return this.equals((WatchedEvent)that);
    return false;
  }

  public boolean equals(WatchedEvent that) {
    if (that == null)
      return false;

    boolean this_present_keeperState = true && this.isSetKeeperState();
    boolean that_present_keeperState = true && that.isSetKeeperState();
    if (this_present_keeperState || that_present_keeperState) {
      if (!(this_present_keeperState && that_present_keeperState))
        return false;
      if (!this.keeperState.equals(that.keeperState))
        return false;
    }

    boolean this_present_eventType = true && this.isSetEventType();
    boolean that_present_eventType = true && that.isSetEventType();
    if (this_present_eventType || that_present_eventType) {
      if (!(this_present_eventType && that_present_eventType))
        return false;
      if (!this.eventType.equals(that.eventType))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(WatchedEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKeeperState()).compareTo(other.isSetKeeperState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeeperState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keeperState, other.keeperState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventType()).compareTo(other.isSetEventType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventType, other.eventType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WatchedEvent(");
    boolean first = true;

    sb.append("keeperState:");
    if (this.keeperState == null) {
      sb.append("null");
    } else {
      sb.append(this.keeperState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventType:");
    if (this.eventType == null) {
      sb.append("null");
    } else {
      sb.append(this.eventType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WatchedEventStandardSchemeFactory implements SchemeFactory {
    public WatchedEventStandardScheme getScheme() {
      return new WatchedEventStandardScheme();
    }
  }

  private static class WatchedEventStandardScheme extends StandardScheme<WatchedEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WatchedEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEEPER_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keeperState = KeeperState.findByValue(iprot.readI32());
              struct.setKeeperStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EVENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventType = EventType.findByValue(iprot.readI32());
              struct.setEventTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WatchedEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.keeperState != null) {
        oprot.writeFieldBegin(KEEPER_STATE_FIELD_DESC);
        oprot.writeI32(struct.keeperState.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.eventType != null) {
        oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.eventType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WatchedEventTupleSchemeFactory implements SchemeFactory {
    public WatchedEventTupleScheme getScheme() {
      return new WatchedEventTupleScheme();
    }
  }

  private static class WatchedEventTupleScheme extends TupleScheme<WatchedEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WatchedEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKeeperState()) {
        optionals.set(0);
      }
      if (struct.isSetEventType()) {
        optionals.set(1);
      }
      if (struct.isSetPath()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetKeeperState()) {
        oprot.writeI32(struct.keeperState.getValue());
      }
      if (struct.isSetEventType()) {
        oprot.writeI32(struct.eventType.getValue());
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WatchedEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.keeperState = KeeperState.findByValue(iprot.readI32());
        struct.setKeeperStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.eventType = EventType.findByValue(iprot.readI32());
        struct.setEventTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
    }
  }

}

