/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.curator.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CuratorException extends TException implements org.apache.thrift.TBase<CuratorException, CuratorException._Fields>, java.io.Serializable, Cloneable, Comparable<CuratorException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CuratorException");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ZOO_KEEPER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("zooKeeperException", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NODE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeException", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CuratorExceptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CuratorExceptionTupleSchemeFactory());
  }

  /**
   * 
   * @see ExceptionType
   */
  public ExceptionType type; // required
  /**
   * 
   * @see ZooKeeperExceptionType
   */
  public ZooKeeperExceptionType zooKeeperException; // required
  /**
   * 
   * @see NodeExceptionType
   */
  public NodeExceptionType nodeException; // required
  public String message; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ExceptionType
     */
    TYPE((short)1, "type"),
    /**
     * 
     * @see ZooKeeperExceptionType
     */
    ZOO_KEEPER_EXCEPTION((short)2, "zooKeeperException"),
    /**
     * 
     * @see NodeExceptionType
     */
    NODE_EXCEPTION((short)3, "nodeException"),
    MESSAGE((short)4, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // ZOO_KEEPER_EXCEPTION
          return ZOO_KEEPER_EXCEPTION;
        case 3: // NODE_EXCEPTION
          return NODE_EXCEPTION;
        case 4: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ExceptionType.class)));
    tmpMap.put(_Fields.ZOO_KEEPER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("zooKeeperException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ZooKeeperExceptionType.class)));
    tmpMap.put(_Fields.NODE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("nodeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NodeExceptionType.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CuratorException.class, metaDataMap);
  }

  public CuratorException() {
  }

  public CuratorException(
    ExceptionType type,
    ZooKeeperExceptionType zooKeeperException,
    NodeExceptionType nodeException,
    String message)
  {
    this();
    this.type = type;
    this.zooKeeperException = zooKeeperException;
    this.nodeException = nodeException;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CuratorException(CuratorException other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetZooKeeperException()) {
      this.zooKeeperException = other.zooKeeperException;
    }
    if (other.isSetNodeException()) {
      this.nodeException = other.nodeException;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public CuratorException deepCopy() {
    return new CuratorException(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.zooKeeperException = null;
    this.nodeException = null;
    this.message = null;
  }

  /**
   * 
   * @see ExceptionType
   */
  public ExceptionType getType() {
    return this.type;
  }

  /**
   * 
   * @see ExceptionType
   */
  public CuratorException setType(ExceptionType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 
   * @see ZooKeeperExceptionType
   */
  public ZooKeeperExceptionType getZooKeeperException() {
    return this.zooKeeperException;
  }

  /**
   * 
   * @see ZooKeeperExceptionType
   */
  public CuratorException setZooKeeperException(ZooKeeperExceptionType zooKeeperException) {
    this.zooKeeperException = zooKeeperException;
    return this;
  }

  public void unsetZooKeeperException() {
    this.zooKeeperException = null;
  }

  /** Returns true if field zooKeeperException is set (has been assigned a value) and false otherwise */
  public boolean isSetZooKeeperException() {
    return this.zooKeeperException != null;
  }

  public void setZooKeeperExceptionIsSet(boolean value) {
    if (!value) {
      this.zooKeeperException = null;
    }
  }

  /**
   * 
   * @see NodeExceptionType
   */
  public NodeExceptionType getNodeException() {
    return this.nodeException;
  }

  /**
   * 
   * @see NodeExceptionType
   */
  public CuratorException setNodeException(NodeExceptionType nodeException) {
    this.nodeException = nodeException;
    return this;
  }

  public void unsetNodeException() {
    this.nodeException = null;
  }

  /** Returns true if field nodeException is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeException() {
    return this.nodeException != null;
  }

  public void setNodeExceptionIsSet(boolean value) {
    if (!value) {
      this.nodeException = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public CuratorException setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ExceptionType)value);
      }
      break;

    case ZOO_KEEPER_EXCEPTION:
      if (value == null) {
        unsetZooKeeperException();
      } else {
        setZooKeeperException((ZooKeeperExceptionType)value);
      }
      break;

    case NODE_EXCEPTION:
      if (value == null) {
        unsetNodeException();
      } else {
        setNodeException((NodeExceptionType)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case ZOO_KEEPER_EXCEPTION:
      return getZooKeeperException();

    case NODE_EXCEPTION:
      return getNodeException();

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case ZOO_KEEPER_EXCEPTION:
      return isSetZooKeeperException();
    case NODE_EXCEPTION:
      return isSetNodeException();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CuratorException)
      return this.equals((CuratorException)that);
    return false;
  }

  public boolean equals(CuratorException that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_zooKeeperException = true && this.isSetZooKeeperException();
    boolean that_present_zooKeeperException = true && that.isSetZooKeeperException();
    if (this_present_zooKeeperException || that_present_zooKeeperException) {
      if (!(this_present_zooKeeperException && that_present_zooKeeperException))
        return false;
      if (!this.zooKeeperException.equals(that.zooKeeperException))
        return false;
    }

    boolean this_present_nodeException = true && this.isSetNodeException();
    boolean that_present_nodeException = true && that.isSetNodeException();
    if (this_present_nodeException || that_present_nodeException) {
      if (!(this_present_nodeException && that_present_nodeException))
        return false;
      if (!this.nodeException.equals(that.nodeException))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CuratorException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZooKeeperException()).compareTo(other.isSetZooKeeperException());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZooKeeperException()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zooKeeperException, other.zooKeeperException);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeException()).compareTo(other.isSetNodeException());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeException()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeException, other.nodeException);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CuratorException(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zooKeeperException:");
    if (this.zooKeeperException == null) {
      sb.append("null");
    } else {
      sb.append(this.zooKeeperException);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeException:");
    if (this.nodeException == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeException);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CuratorExceptionStandardSchemeFactory implements SchemeFactory {
    public CuratorExceptionStandardScheme getScheme() {
      return new CuratorExceptionStandardScheme();
    }
  }

  private static class CuratorExceptionStandardScheme extends StandardScheme<CuratorException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CuratorException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = ExceptionType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ZOO_KEEPER_EXCEPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.zooKeeperException = ZooKeeperExceptionType.findByValue(iprot.readI32());
              struct.setZooKeeperExceptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODE_EXCEPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeException = NodeExceptionType.findByValue(iprot.readI32());
              struct.setNodeExceptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CuratorException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.zooKeeperException != null) {
        oprot.writeFieldBegin(ZOO_KEEPER_EXCEPTION_FIELD_DESC);
        oprot.writeI32(struct.zooKeeperException.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.nodeException != null) {
        oprot.writeFieldBegin(NODE_EXCEPTION_FIELD_DESC);
        oprot.writeI32(struct.nodeException.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CuratorExceptionTupleSchemeFactory implements SchemeFactory {
    public CuratorExceptionTupleScheme getScheme() {
      return new CuratorExceptionTupleScheme();
    }
  }

  private static class CuratorExceptionTupleScheme extends TupleScheme<CuratorException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CuratorException struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetZooKeeperException()) {
        optionals.set(1);
      }
      if (struct.isSetNodeException()) {
        optionals.set(2);
      }
      if (struct.isSetMessage()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetZooKeeperException()) {
        oprot.writeI32(struct.zooKeeperException.getValue());
      }
      if (struct.isSetNodeException()) {
        oprot.writeI32(struct.nodeException.getValue());
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CuratorException struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.type = ExceptionType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.zooKeeperException = ZooKeeperExceptionType.findByValue(iprot.readI32());
        struct.setZooKeeperExceptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nodeException = NodeExceptionType.findByValue(iprot.readI32());
        struct.setNodeExceptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
    }
  }

}

