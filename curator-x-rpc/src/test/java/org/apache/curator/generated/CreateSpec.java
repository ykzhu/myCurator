/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.curator.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CreateSpec implements org.apache.thrift.TBase<CreateSpec, CreateSpec._Fields>, java.io.Serializable, Cloneable, Comparable<CreateSpec> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateSpec");

  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ASYNC_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("asyncContext", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COMPRESSED_FIELD_DESC = new org.apache.thrift.protocol.TField("compressed", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CREATING_PARENTS_IF_NEEDED_FIELD_DESC = new org.apache.thrift.protocol.TField("creatingParentsIfNeeded", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField WITH_PROTECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("withProtection", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreateSpecStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreateSpecTupleSchemeFactory());
  }

  public String path; // required
  public ByteBuffer data; // required
  /**
   * 
   * @see CreateMode
   */
  public CreateMode mode; // required
  public String asyncContext; // required
  public boolean compressed; // required
  public boolean creatingParentsIfNeeded; // required
  public boolean withProtection; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PATH((short)1, "path"),
    DATA((short)2, "data"),
    /**
     * 
     * @see CreateMode
     */
    MODE((short)3, "mode"),
    ASYNC_CONTEXT((short)4, "asyncContext"),
    COMPRESSED((short)5, "compressed"),
    CREATING_PARENTS_IF_NEEDED((short)6, "creatingParentsIfNeeded"),
    WITH_PROTECTION((short)7, "withProtection");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PATH
          return PATH;
        case 2: // DATA
          return DATA;
        case 3: // MODE
          return MODE;
        case 4: // ASYNC_CONTEXT
          return ASYNC_CONTEXT;
        case 5: // COMPRESSED
          return COMPRESSED;
        case 6: // CREATING_PARENTS_IF_NEEDED
          return CREATING_PARENTS_IF_NEEDED;
        case 7: // WITH_PROTECTION
          return WITH_PROTECTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPRESSED_ISSET_ID = 0;
  private static final int __CREATINGPARENTSIFNEEDED_ISSET_ID = 1;
  private static final int __WITHPROTECTION_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CreateMode.class)));
    tmpMap.put(_Fields.ASYNC_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("asyncContext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPRESSED, new org.apache.thrift.meta_data.FieldMetaData("compressed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CREATING_PARENTS_IF_NEEDED, new org.apache.thrift.meta_data.FieldMetaData("creatingParentsIfNeeded", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WITH_PROTECTION, new org.apache.thrift.meta_data.FieldMetaData("withProtection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateSpec.class, metaDataMap);
  }

  public CreateSpec() {
  }

  public CreateSpec(
    String path,
    ByteBuffer data,
    CreateMode mode,
    String asyncContext,
    boolean compressed,
    boolean creatingParentsIfNeeded,
    boolean withProtection)
  {
    this();
    this.path = path;
    this.data = data;
    this.mode = mode;
    this.asyncContext = asyncContext;
    this.compressed = compressed;
    setCompressedIsSet(true);
    this.creatingParentsIfNeeded = creatingParentsIfNeeded;
    setCreatingParentsIfNeededIsSet(true);
    this.withProtection = withProtection;
    setWithProtectionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreateSpec(CreateSpec other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetData()) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
;
    }
    if (other.isSetMode()) {
      this.mode = other.mode;
    }
    if (other.isSetAsyncContext()) {
      this.asyncContext = other.asyncContext;
    }
    this.compressed = other.compressed;
    this.creatingParentsIfNeeded = other.creatingParentsIfNeeded;
    this.withProtection = other.withProtection;
  }

  public CreateSpec deepCopy() {
    return new CreateSpec(this);
  }

  @Override
  public void clear() {
    this.path = null;
    this.data = null;
    this.mode = null;
    this.asyncContext = null;
    setCompressedIsSet(false);
    this.compressed = false;
    setCreatingParentsIfNeededIsSet(false);
    this.creatingParentsIfNeeded = false;
    setWithProtectionIsSet(false);
    this.withProtection = false;
  }

  public String getPath() {
    return this.path;
  }

  public CreateSpec setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public byte[] getData() {
    setData(org.apache.thrift.TBaseHelper.rightSize(data));
    return data == null ? null : data.array();
  }

  public ByteBuffer bufferForData() {
    return data;
  }

  public CreateSpec setData(byte[] data) {
    setData(data == null ? (ByteBuffer)null : ByteBuffer.wrap(data));
    return this;
  }

  public CreateSpec setData(ByteBuffer data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  /**
   * 
   * @see CreateMode
   */
  public CreateMode getMode() {
    return this.mode;
  }

  /**
   * 
   * @see CreateMode
   */
  public CreateSpec setMode(CreateMode mode) {
    this.mode = mode;
    return this;
  }

  public void unsetMode() {
    this.mode = null;
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return this.mode != null;
  }

  public void setModeIsSet(boolean value) {
    if (!value) {
      this.mode = null;
    }
  }

  public String getAsyncContext() {
    return this.asyncContext;
  }

  public CreateSpec setAsyncContext(String asyncContext) {
    this.asyncContext = asyncContext;
    return this;
  }

  public void unsetAsyncContext() {
    this.asyncContext = null;
  }

  /** Returns true if field asyncContext is set (has been assigned a value) and false otherwise */
  public boolean isSetAsyncContext() {
    return this.asyncContext != null;
  }

  public void setAsyncContextIsSet(boolean value) {
    if (!value) {
      this.asyncContext = null;
    }
  }

  public boolean isCompressed() {
    return this.compressed;
  }

  public CreateSpec setCompressed(boolean compressed) {
    this.compressed = compressed;
    setCompressedIsSet(true);
    return this;
  }

  public void unsetCompressed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPRESSED_ISSET_ID);
  }

  /** Returns true if field compressed is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressed() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPRESSED_ISSET_ID);
  }

  public void setCompressedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPRESSED_ISSET_ID, value);
  }

  public boolean isCreatingParentsIfNeeded() {
    return this.creatingParentsIfNeeded;
  }

  public CreateSpec setCreatingParentsIfNeeded(boolean creatingParentsIfNeeded) {
    this.creatingParentsIfNeeded = creatingParentsIfNeeded;
    setCreatingParentsIfNeededIsSet(true);
    return this;
  }

  public void unsetCreatingParentsIfNeeded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATINGPARENTSIFNEEDED_ISSET_ID);
  }

  /** Returns true if field creatingParentsIfNeeded is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatingParentsIfNeeded() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATINGPARENTSIFNEEDED_ISSET_ID);
  }

  public void setCreatingParentsIfNeededIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATINGPARENTSIFNEEDED_ISSET_ID, value);
  }

  public boolean isWithProtection() {
    return this.withProtection;
  }

  public CreateSpec setWithProtection(boolean withProtection) {
    this.withProtection = withProtection;
    setWithProtectionIsSet(true);
    return this;
  }

  public void unsetWithProtection() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHPROTECTION_ISSET_ID);
  }

  /** Returns true if field withProtection is set (has been assigned a value) and false otherwise */
  public boolean isSetWithProtection() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHPROTECTION_ISSET_ID);
  }

  public void setWithProtectionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHPROTECTION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((ByteBuffer)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((CreateMode)value);
      }
      break;

    case ASYNC_CONTEXT:
      if (value == null) {
        unsetAsyncContext();
      } else {
        setAsyncContext((String)value);
      }
      break;

    case COMPRESSED:
      if (value == null) {
        unsetCompressed();
      } else {
        setCompressed((Boolean)value);
      }
      break;

    case CREATING_PARENTS_IF_NEEDED:
      if (value == null) {
        unsetCreatingParentsIfNeeded();
      } else {
        setCreatingParentsIfNeeded((Boolean)value);
      }
      break;

    case WITH_PROTECTION:
      if (value == null) {
        unsetWithProtection();
      } else {
        setWithProtection((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PATH:
      return getPath();

    case DATA:
      return getData();

    case MODE:
      return getMode();

    case ASYNC_CONTEXT:
      return getAsyncContext();

    case COMPRESSED:
      return Boolean.valueOf(isCompressed());

    case CREATING_PARENTS_IF_NEEDED:
      return Boolean.valueOf(isCreatingParentsIfNeeded());

    case WITH_PROTECTION:
      return Boolean.valueOf(isWithProtection());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PATH:
      return isSetPath();
    case DATA:
      return isSetData();
    case MODE:
      return isSetMode();
    case ASYNC_CONTEXT:
      return isSetAsyncContext();
    case COMPRESSED:
      return isSetCompressed();
    case CREATING_PARENTS_IF_NEEDED:
      return isSetCreatingParentsIfNeeded();
    case WITH_PROTECTION:
      return isSetWithProtection();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreateSpec)
      return this.equals((CreateSpec)that);
    return false;
  }

  public boolean equals(CreateSpec that) {
    if (that == null)
      return false;

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_mode = true && this.isSetMode();
    boolean that_present_mode = true && that.isSetMode();
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (!this.mode.equals(that.mode))
        return false;
    }

    boolean this_present_asyncContext = true && this.isSetAsyncContext();
    boolean that_present_asyncContext = true && that.isSetAsyncContext();
    if (this_present_asyncContext || that_present_asyncContext) {
      if (!(this_present_asyncContext && that_present_asyncContext))
        return false;
      if (!this.asyncContext.equals(that.asyncContext))
        return false;
    }

    boolean this_present_compressed = true;
    boolean that_present_compressed = true;
    if (this_present_compressed || that_present_compressed) {
      if (!(this_present_compressed && that_present_compressed))
        return false;
      if (this.compressed != that.compressed)
        return false;
    }

    boolean this_present_creatingParentsIfNeeded = true;
    boolean that_present_creatingParentsIfNeeded = true;
    if (this_present_creatingParentsIfNeeded || that_present_creatingParentsIfNeeded) {
      if (!(this_present_creatingParentsIfNeeded && that_present_creatingParentsIfNeeded))
        return false;
      if (this.creatingParentsIfNeeded != that.creatingParentsIfNeeded)
        return false;
    }

    boolean this_present_withProtection = true;
    boolean that_present_withProtection = true;
    if (this_present_withProtection || that_present_withProtection) {
      if (!(this_present_withProtection && that_present_withProtection))
        return false;
      if (this.withProtection != that.withProtection)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CreateSpec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAsyncContext()).compareTo(other.isSetAsyncContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsyncContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asyncContext, other.asyncContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompressed()).compareTo(other.isSetCompressed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compressed, other.compressed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatingParentsIfNeeded()).compareTo(other.isSetCreatingParentsIfNeeded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatingParentsIfNeeded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatingParentsIfNeeded, other.creatingParentsIfNeeded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithProtection()).compareTo(other.isSetWithProtection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithProtection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withProtection, other.withProtection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreateSpec(");
    boolean first = true;

    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.data, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    if (this.mode == null) {
      sb.append("null");
    } else {
      sb.append(this.mode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("asyncContext:");
    if (this.asyncContext == null) {
      sb.append("null");
    } else {
      sb.append(this.asyncContext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compressed:");
    sb.append(this.compressed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creatingParentsIfNeeded:");
    sb.append(this.creatingParentsIfNeeded);
    first = false;
    if (!first) sb.append(", ");
    sb.append("withProtection:");
    sb.append(this.withProtection);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreateSpecStandardSchemeFactory implements SchemeFactory {
    public CreateSpecStandardScheme getScheme() {
      return new CreateSpecStandardScheme();
    }
  }

  private static class CreateSpecStandardScheme extends StandardScheme<CreateSpec> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreateSpec struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readBinary();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mode = CreateMode.findByValue(iprot.readI32());
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ASYNC_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.asyncContext = iprot.readString();
              struct.setAsyncContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPRESSED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.compressed = iprot.readBool();
              struct.setCompressedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATING_PARENTS_IF_NEEDED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.creatingParentsIfNeeded = iprot.readBool();
              struct.setCreatingParentsIfNeededIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WITH_PROTECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.withProtection = iprot.readBool();
              struct.setWithProtectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreateSpec struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeBinary(struct.data);
        oprot.writeFieldEnd();
      }
      if (struct.mode != null) {
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeI32(struct.mode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.asyncContext != null) {
        oprot.writeFieldBegin(ASYNC_CONTEXT_FIELD_DESC);
        oprot.writeString(struct.asyncContext);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMPRESSED_FIELD_DESC);
      oprot.writeBool(struct.compressed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATING_PARENTS_IF_NEEDED_FIELD_DESC);
      oprot.writeBool(struct.creatingParentsIfNeeded);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_PROTECTION_FIELD_DESC);
      oprot.writeBool(struct.withProtection);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreateSpecTupleSchemeFactory implements SchemeFactory {
    public CreateSpecTupleScheme getScheme() {
      return new CreateSpecTupleScheme();
    }
  }

  private static class CreateSpecTupleScheme extends TupleScheme<CreateSpec> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreateSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPath()) {
        optionals.set(0);
      }
      if (struct.isSetData()) {
        optionals.set(1);
      }
      if (struct.isSetMode()) {
        optionals.set(2);
      }
      if (struct.isSetAsyncContext()) {
        optionals.set(3);
      }
      if (struct.isSetCompressed()) {
        optionals.set(4);
      }
      if (struct.isSetCreatingParentsIfNeeded()) {
        optionals.set(5);
      }
      if (struct.isSetWithProtection()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetData()) {
        oprot.writeBinary(struct.data);
      }
      if (struct.isSetMode()) {
        oprot.writeI32(struct.mode.getValue());
      }
      if (struct.isSetAsyncContext()) {
        oprot.writeString(struct.asyncContext);
      }
      if (struct.isSetCompressed()) {
        oprot.writeBool(struct.compressed);
      }
      if (struct.isSetCreatingParentsIfNeeded()) {
        oprot.writeBool(struct.creatingParentsIfNeeded);
      }
      if (struct.isSetWithProtection()) {
        oprot.writeBool(struct.withProtection);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreateSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.data = iprot.readBinary();
        struct.setDataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mode = CreateMode.findByValue(iprot.readI32());
        struct.setModeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.asyncContext = iprot.readString();
        struct.setAsyncContextIsSet(true);
      }
      if (incoming.get(4)) {
        struct.compressed = iprot.readBool();
        struct.setCompressedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.creatingParentsIfNeeded = iprot.readBool();
        struct.setCreatingParentsIfNeededIsSet(true);
      }
      if (incoming.get(6)) {
        struct.withProtection = iprot.readBool();
        struct.setWithProtectionIsSet(true);
      }
    }
  }

}

